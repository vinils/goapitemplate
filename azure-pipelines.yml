trigger:
  branches:
    include:
    - '*'
  paths:
    exclude:
    - README.md
    - devcontainer
    - env.example
    - '**/*.http'
    - azurepipelines-coverage.yml
    - Dockerfile.dev

name: $(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

strategy:
  matrix:
    linuxAmd64:
      imageName: "ubuntu-latest"
      PLATFORM: 'linux/amd64'
      FINALIMAGE: gcr.io/distroless/base-debian11
    linuxArm64:
      imageName: "ubuntu-latest"
      PLATFORM: 'linux/arm64'
      FINALIMAGE: gcr.io/distroless/base-debian11
    windows:
      imageName: "windows-latest"
      PLATFORM: 'windows/amd64'
      FINALIMAGE: golang:$(BUILDIMGTAG)

pool:
  vmImage: $(imageName)

variables:
  BUILDIMGTAG: '1.24.7'

steps:

- script: |
    docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
  condition: contains(variables.PLATFORM, 'arm')
  displayName: Set ARM emulator on linux

- task: Docker@2
  displayName: 'Build'
  inputs:
    repository: '$(Build.DefinitionName)'
    command: 'build'
    Dockerfile: '**/Dockerfile'
    arguments: |
      --target build
      --platform $(PLATFORM)
      --build-arg BUILDIMGTAG=$(BUILDIMGTAG)
      --build-arg BUILDNUMER=$(Build.BuildNumber)
      --build-arg FINALIMAGE=$(FINALIMAGE)
    tags: |
      build

- script: |
    docker create --name temp_container $(Build.DefinitionName):build
    docker cp temp_container:/app/bin $(Build.ArtifactStagingDirectory)
    docker rm temp_container
  displayName: 'Copy Build'

- task: PublishBuildArtifacts@1
  displayName: "Publish Build"
  continueOnError: true
  inputs:
     artifactName: $(PLATFORM)

- task: Docker@2
  displayName: "Tests & Coverage"
  inputs:
    repository: '$(Build.DefinitionName)'
    command: 'build'
    Dockerfile: '**/Dockerfile'
    arguments: |
      --target test
      --platform $(PLATFORM)
      --build-arg BUILDIMGTAG=$(BUILDIMGTAG)
      --build-arg BUILDNUMER=$(Build.BuildNumber)
      --build-arg FINALIMAGE=$(FINALIMAGE)
    tags: |
      test

- script: |
    docker create --name temp_container $(Build.DefinitionName):test
    docker cp temp_container:/app/test $(Build.ArtifactStagingDirectory)/test
    docker rm temp_container
  displayName: 'Copy Tests'

- task: PowerShell@2
  displayName: 'Remove UTF BOM from tests files'
  condition: contains(variables.PLATFORM, 'windows')
  inputs:
    targetType: 'inline'
    script: |
      $Utf8NoBomEncoding = New-Object System.Text.UTF8Encoding $False # $False indicates no BOM

      $testFilePath = "$(Build.ArtifactStagingDirectory)/test/junit.xml"
      $testContent = Get-Content $testFilePath -Raw
      Write-Host "$testContent"
      [System.IO.File]::WriteAllLines($testFilePath, $testContent, $Utf8NoBomEncoding)

      $coverageFilePath = "$(Build.ArtifactStagingDirectory)/test/coverage.xml"
      $coverageContent = Get-Content $coverageFilePath -Raw
      Write-Host "$coverageContent"
      [System.IO.File]::WriteAllLines($coverageFilePath, $coverageContent, $Utf8NoBomEncoding)

      dir "$(Build.ArtifactStagingDirectory)/test"

- task: PublishTestResults@2
  displayName: "Publish Tests"
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: '$(Build.ArtifactStagingDirectory)/test/**/junit.xml'
    mergeTestResults: true
    failTaskOnFailedTests: true
    failTaskOnFailureToPublishResults: true
    failTaskOnMissingResultsFile: true
    testRunTitle: "$(PLATFORM)"

- task: PublishCodeCoverageResults@2
  displayName: "Publish Coverage"
  condition: always()
  inputs:
    summaryFileLocation: '$(Build.ArtifactStagingDirectory)/test/**/coverage.xml'
    failIfCoverageEmpty: true

- task: Docker@2
  displayName: "Final image"
  inputs:
    repository: '$(Build.DefinitionName)'
    command: 'build'
    Dockerfile: '**/Dockerfile'
    arguments: |
      --platform $(PLATFORM)
      --build-arg BUILDIMGTAG=$(BUILDIMGTAG)
      --build-arg BUILDNUMER=$(Build.BuildNumber)
      --build-arg FINALIMAGE=$(FINALIMAGE)
    ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/main') }}:
      tags: |
        $(Build.BuildNumber)
        latest
    ${{ else }}:
      tags: |
        $(Build.BuildNumber)

# - task: Docker@2
#   inputs:
#     containerRegistry: '$(containerRegistry)'
#     repository: '$(Build.DefinitionName)'
#     command: 'push'
